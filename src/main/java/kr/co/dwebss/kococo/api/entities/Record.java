package kr.co.dwebss.kococo.api.entities;
// Generated 2019. 5. 23 ���� 7:09:58 by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Record generated by hbm2java
 */
@Entity
@Table(name = "record", catalog = "kococo")
public class Record implements java.io.Serializable {

	private Integer recordId;
	private Admin admin;
	private User user;
	private Date recordStartD;
	private Date recordStartDt;
	private Date recordEndD;
	private Date recordEndDt;
	private Character consultingYn;
	private Character consultingReplyYn;
	private String consultingTitle;
	private String consultingContents;
	private Date consultingRegistDt;
	private String consultingReplyContents;
	private Date consultingReplyRegistDt;
	private Set<Analysis> analysises = new HashSet<Analysis>(0);

	public Record() {
	}

	public Record(Admin admin, User user, Date recordStartD, Date recordStartDt, Date recordEndD, Date recordEndDt,
			Character consultingYn, Character consultingReplyYn, String consultingTitle, String consultingContents,
			Date consultingRegistDt, String consultingReplyContents, Date consultingReplyRegistDt,
			Set<Analysis> analysises) {
		this.admin = admin;
		this.user = user;
		this.recordStartD = recordStartD;
		this.recordStartDt = recordStartDt;
		this.recordEndD = recordEndD;
		this.recordEndDt = recordEndDt;
		this.consultingYn = consultingYn;
		this.consultingReplyYn = consultingReplyYn;
		this.consultingTitle = consultingTitle;
		this.consultingContents = consultingContents;
		this.consultingRegistDt = consultingRegistDt;
		this.consultingReplyContents = consultingReplyContents;
		this.consultingReplyRegistDt = consultingReplyRegistDt;
		this.analysises = analysises;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "RECORD_ID", unique = true, nullable = false)
	public Integer getRecordId() {
		return this.recordId;
	}

	public void setRecordId(Integer recordId) {
		this.recordId = recordId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CONSULTING_REPLY_ADMIN_ID")
	public Admin getAdmin() {
		return this.admin;
	}

	public void setAdmin(Admin admin) {
		this.admin = admin;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "USER_APP_ID")
	public User getUser() {
		return this.user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "RECORD_START_D", length = 10)
	public Date getRecordStartD() {
		return this.recordStartD;
	}

	public void setRecordStartD(Date recordStartD) {
		this.recordStartD = recordStartD;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "RECORD_START_DT", length = 19)
	public Date getRecordStartDt() {
		return this.recordStartDt;
	}

	public void setRecordStartDt(Date recordStartDt) {
		this.recordStartDt = recordStartDt;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "RECORD_END_D", length = 10)
	public Date getRecordEndD() {
		return this.recordEndD;
	}

	public void setRecordEndD(Date recordEndD) {
		this.recordEndD = recordEndD;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "RECORD_END_DT", length = 19)
	public Date getRecordEndDt() {
		return this.recordEndDt;
	}

	public void setRecordEndDt(Date recordEndDt) {
		this.recordEndDt = recordEndDt;
	}

	@Column(name = "CONSULTING_YN", length = 1)
	public Character getConsultingYn() {
		return this.consultingYn;
	}

	public void setConsultingYn(Character consultingYn) {
		this.consultingYn = consultingYn;
	}

	@Column(name = "CONSULTING_REPLY_YN", length = 1)
	public Character getConsultingReplyYn() {
		return this.consultingReplyYn;
	}

	public void setConsultingReplyYn(Character consultingReplyYn) {
		this.consultingReplyYn = consultingReplyYn;
	}

	@Column(name = "CONSULTING_TITLE", length = 10)
	public String getConsultingTitle() {
		return this.consultingTitle;
	}

	public void setConsultingTitle(String consultingTitle) {
		this.consultingTitle = consultingTitle;
	}

	@Column(name = "CONSULTING_CONTENTS", length = 250)
	public String getConsultingContents() {
		return this.consultingContents;
	}

	public void setConsultingContents(String consultingContents) {
		this.consultingContents = consultingContents;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CONSULTING_REGIST_DT", length = 19)
	public Date getConsultingRegistDt() {
		return this.consultingRegistDt;
	}

	public void setConsultingRegistDt(Date consultingRegistDt) {
		this.consultingRegistDt = consultingRegistDt;
	}

	@Column(name = "CONSULTING_REPLY_CONTENTS", length = 250)
	public String getConsultingReplyContents() {
		return this.consultingReplyContents;
	}

	public void setConsultingReplyContents(String consultingReplyContents) {
		this.consultingReplyContents = consultingReplyContents;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CONSULTING_REPLY_REGIST_DT", length = 19)
	public Date getConsultingReplyRegistDt() {
		return this.consultingReplyRegistDt;
	}

	public void setConsultingReplyRegistDt(Date consultingReplyRegistDt) {
		this.consultingReplyRegistDt = consultingReplyRegistDt;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "record")
	public Set<Analysis> getAnalysises() {
		return this.analysises;
	}

	public void setAnalysises(Set<Analysis> analysises) {
		this.analysises = analysises;
	}

}
